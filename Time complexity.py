# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p_WJ6x9yDy4V0J4NKexK5yCPfIjWu_vZ

## **Time complexity questions**

1.
"""

for i in range(n):
    modified_i = i * k

"""Ans: O[log_k(n)]

2.
"""

value = 0;
for i in range(n):
  for j in range(i):
    value=value+1

"""Ans: n(n-1)/2

3.
"""

a = 0
i = N
while (i > 0):
  a += i
  i //= 2

"""Ans: O[log n]

4.
"""

k = 0;
for i in range(n//2,n):
  for j in range(2,n,pow(2,j)):
        k = k + n / 2;

"""Ans: O[n logn]

5.
"""

a = 0;
for i in range(N):
  for j in reversed(range(i,N)):
    a = a + i + j;

"""O[n^2]

6.
"""

a = 0
b = 0
for i in range(N):
  a = a + random()

for i in range(M):
  b= b + random()

"""O[N+M]

7.
"""

for i in range(N):
  a = a + random()

for i in range(N):
  b= b + random()

"""O[2N] = O[N]

8. Here, random(int n) spends one unit of time to return its value
"""

import random

def function(n):
    if n <= 0:
        return 0
    else:
        i = random.randint(0, n - 1)
        print("this")
        return function(i) + function(n - 1 - i)

"""= 6 units of time

9.
"""

def is_prime(n):
    if n == 1:
        return False

    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False

    return True

"""O[sqrt(n)]"""